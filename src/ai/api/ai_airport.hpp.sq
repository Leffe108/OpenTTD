/* $Id$ */

/*
 * This file is part of OpenTTD.
 * OpenTTD is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * OpenTTD is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with OpenTTD. If not, see <http://www.gnu.org/licenses/>.
 */

/* THIS FILE IS AUTO-GENERATED; PLEASE DO NOT ALTER MANUALLY */

#include "ai_airport.hpp"

namespace SQConvert {
	/* Allow AIAirport to be used as Squirrel parameter */
	template <> AIAirport *GetParam(ForceType<AIAirport *>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return  (AIAirport *)instance; }
	template <> AIAirport &GetParam(ForceType<AIAirport &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return *(AIAirport *)instance; }
	template <> const AIAirport *GetParam(ForceType<const AIAirport *>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return  (AIAirport *)instance; }
	template <> const AIAirport &GetParam(ForceType<const AIAirport &>, HSQUIRRELVM vm, int index, SQAutoFreePointers *ptr) { SQUserPointer instance; sq_getinstanceup(vm, index, &instance, 0); return *(AIAirport *)instance; }
	template <> int Return<AIAirport *>(HSQUIRRELVM vm, AIAirport *res) { if (res == NULL) { sq_pushnull(vm); return 1; } res->AddRef(); Squirrel::CreateClassInstanceVM(vm, "AIAirport", res, NULL, DefSQDestructorCallback<AIAirport>); return 1; }
} // namespace SQConvert

void SQAIAirport_Register(Squirrel *engine)
{
	DefSQClass <AIAirport> SQAIAirport("AIAirport");
	SQAIAirport.PreRegister(engine);
	SQAIAirport.AddConstructor<void (AIAirport::*)(), 1>(engine, "x");

	SQAIAirport.DefSQStaticMethod(engine, &AIAirport::IsHangarTile,       "IsHangarTile",       2, ".i");
	SQAIAirport.DefSQStaticMethod(engine, &AIAirport::IsAirportTile,      "IsAirportTile",      2, ".i");
	SQAIAirport.DefSQStaticMethod(engine, &AIAirport::GetNumHangars,      "GetNumHangars",      2, ".i");
	SQAIAirport.DefSQStaticMethod(engine, &AIAirport::GetHangarOfAirport, "GetHangarOfAirport", 2, ".i");
	SQAIAirport.DefSQStaticMethod(engine, &AIAirport::BuildAirport,       "BuildAirport",       5, ".iiii");
	SQAIAirport.DefSQStaticMethod(engine, &AIAirport::RemoveAirport,      "RemoveAirport",      2, ".i");
	SQAIAirport.DefSQStaticMethod(engine, &AIAirport::GetAirportType,     "GetAirportType",     2, ".i");
	SQAIAirport.DefSQStaticMethod(engine, &AIAirport::GetAirportView,     "GetAirportView",     2, ".i");

	SQAIAirport.PostRegister(engine);
}
